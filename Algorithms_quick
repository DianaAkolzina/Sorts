import random
from heapq import heappush, heappop

def generate_random_numbers(n):
    return [random.randint(1, 1000) for _ in range(n)]

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])

    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])
    return result

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

def heap_sort(arr):
    heap = []
    for value in arr:
        heappush(heap, value)

    return [heappop(heap) for _ in range(len(heap))]

def counting_sort(arr, max_val):
    count = [0] * (max_val + 1)
    for a in arr:
        count[a] += 1
    i = 0
    for a in range(max_val + 1):
        for _ in range(count[a]):
            arr[i] = a
            i += 1
    return arr

def radix_sort(arr, base=10):
    if not arr:
        return arr

    max_val = max(arr)
    max_exp = len(str(max_val))
    for exp in range(max_exp):
        arr = counting_sort_radix(arr, exp, base)

    return arr
def counting_sort_radix(arr, exp, base):
    n = len(arr)
    output = [0] * n
    count = [0] * base

    for i in range(n):
        index = arr[i] // base**exp % base
        count[index] += 1

    for i in range(1, base):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        index = arr[i] // base**exp % base
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1

    return output

def shell_sort(arr):
    n = len(arr)
    gap = n // 2

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2

    return arr

def tim_sort(arr):
    return sorted(arr)

if __name__ == "__main__":
    n = 1000
    max_val = 1000

    random_numbers = generate_random_numbers(n)
    print("Original array:", random_numbers)

    sorting_algorithms = [
        bubble_sort,
        selection_sort,
        insertion_sort,
        merge_sort,
        quick_sort,
        heap_sort,
        counting_sort,
        radix_sort,
        shell_sort,
        tim_sort,
    ]

    for sort_algorithm in sorting_algorithms:
        sorted_array = sort_algorithm(random_numbers.copy()) if sort_algorithm != counting_sort else sort_algorithm(random_numbers.copy(), max_val)
        print(f"{sort_algorithm.__name__}: {sorted_array}")

